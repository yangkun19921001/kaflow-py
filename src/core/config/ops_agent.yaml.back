# =================================================================
# 智能运维分析Agent - KaFlow-Py配置
# 基于KaFlow-Py协议标准的智能运维分析系统
# =================================================================

# 配置ID
id: 3

# =================================================================
# 协议版本与元信息
# =================================================================
protocol:
  name: "智能运维分析Agent"
  version: "1.0.0"
  schema_version: "2025.09.10"
  description: "基于MCP Server的智能运维分析系统，支持意图识别、任务规划、远程执行、错误修复和报告生成"
  author: "DevYK"
  license: "MIT"

# =================================================================
# 全局配置
# =================================================================
global_config:
  # 运行时配置
  runtime:
    timeout: 300  # 5分钟超时，运维任务可能较长
    max_retries: 5  # 增加重试次数
    parallel_limit: 3
    debug_mode: true
    trace_enabled: true
    checkpoint_enabled: true
    
  # 内存配置
  memory:
    type: "sqlite"
    config:
      database: "ops_agent_memory.db"
      table_name: "ops_sessions"
      
  # 日志配置
  logging:
    level: "INFO"
    format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    file: "ops_agent.log"


# =================================================================
# Agent配置
# =================================================================
agents:
  # 意图分析Agent
  intent_analyzer:
    name: "意图分析Agent"
    type: "agent"
    description: "分析用户输入的运维需求，判断是否需要远程分析和执行"
    enabled: true
    llm:                                         # Agent 专用 LLM 配置
      provider: "deepseek"
      base_url: "https://api.ppinfra.com/v3/openai"
      api_key: "${DEEPSEEK_API_KEY}"
      model: "deepseek/deepseek-v3-0324"
      temperature: 0.3
      max_tokens: 4096
      timeout: 60
    system_prompt: |
      你是一个专业的运维意图分析专家。你的任务是分析用户的运维需求，判断：
      
      1. 用户的具体需求类型（监控、故障排查、性能分析、部署、配置等）
      2. 是否需要远程系统分析（需要执行命令、查看日志、检查状态等）
      3. 紧急程度和风险级别
      4. 需要的权限和资源
      
      请以JSON格式输出分析结果：
      {
        "intent_type": "监控|故障排查|性能分析|部署|配置|其他",
        "requires_remote": true|false,
        "urgency": "低|中|高|紧急",
        "risk_level": "低|中|高",
        "required_permissions": ["权限1", "权限2"],
        "estimated_complexity": "简单|中等|复杂",
        "summary": "需求概要描述"
      }

  # 任务规划Agent
  task_planner:
    name: "任务规划Agent"
    type: "agent"
    description: "将复杂的运维任务分解为多个可执行的子计划"
    enabled: true
    llm:                                         # Agent 专用 LLM 配置
      provider: "deepseek"
      base_url: "https://api.ppinfra.com/v3/openai"
      api_key: "${DEEPSEEK_API_KEY}"
      model: "deepseek/deepseek-v3-0324"
      temperature: 0.3
      max_tokens: 4096
      timeout: 60
    system_prompt: |
      你是一个专业的运维任务规划专家。基于用户需求和意图分析结果，制定详细的执行计划。
      
      规划原则：
      1. 将复杂任务分解为简单、可执行的步骤
      2. 考虑步骤间的依赖关系和执行顺序
      3. 为每个步骤定义成功标准和失败处理
      4. 估算执行时间和资源需求
      5. 识别潜在风险点
      
      请以JSON格式输出执行计划：
      {
        "plan_id": "计划唯一标识",
        "total_steps": 步骤数量,
        "estimated_duration": "预估时间",
        "steps": [
          {
            "step_id": "步骤标识",
            "name": "步骤名称",
            "description": "详细描述",
            "command_type": "shell|api|check|analysis",
            "command": "具体命令或操作",
            "expected_output": "预期输出",
            "success_criteria": "成功标准",
            "dependencies": ["依赖的步骤ID"],
            "timeout": 超时时间秒,
            "retry_count": 重试次数,
            "risk_level": "低|中|高"
          }
        ],
        "rollback_plan": "回滚计划",
        "risk_mitigation": "风险缓解措施"
      }

  # 命令执行Agent
  command_executor:
    name: "命令执行Agent"
    type: "react_agent"
    description: "通过MCP Server执行远程命令和操作"
    enabled: true
    llm:                                         # Agent 专用 LLM 配置
      provider: "deepseek"
      base_url: "https://api.ppinfra.com/v3/openai"
      api_key: "${DEEPSEEK_API_KEY}"
      model: "deepseek/deepseek-v3-0324"
      temperature: 0.3
      max_tokens: 4096
      timeout: 60
    system_prompt: |
      你是一个专业的运维命令执行专家。你的任务是：
      
      1. 根据计划步骤执行具体的远程命令
      2. 解析命令执行结果
      3. 判断执行是否成功
      4. 在失败时分析原因并尝试修复
      
      执行规范：
      - 严格按照安全规范执行命令
      - 详细记录执行过程和结果
      - 及时识别和处理异常情况
      - 保护敏感信息不被泄露
      
      请以JSON格式输出执行结果：
      {
        "step_id": "步骤ID",
        "status": "success|failed|retry",
        "command": "执行的命令",
        "output": "命令输出",
        "error": "错误信息（如有）",
        "duration": 执行时间秒,
        "next_action": "continue|retry|abort|fix",
        "fix_suggestion": "修复建议（如需要）"
      }
    
    # MCP服务器配置
    tools: []                                    # 内置工具列表 (空表示只使用 MCP 工具)
    
    mcp_servers:                                 # MCP 服务器配置
      - name: "remote_execution_server"
        description: "远程命令执行 MCP 服务器"
        transport: "sse"
        url: "http://10.1.16.4:8000/mcp/sse"
        timeout_seconds: 30
        enabled: true
        retry_attempts: 3
        
        # 预期的工具列表 (用于验证)
        expected_tools:
          - name: "remote_exec"
            description: "在远程机器上执行命令"
            parameters:
              type: "object"
              properties:
                machineId:
                  type: "string"
                  description: "目标机器ID"
                script:
                  type: "string"
                  description: "要执行的命令或脚本"
              required: ["machineId", "script"]


  # 错误修复Agent
  error_fixer:
    name: "错误修复Agent"
    type: "react_agent"
    description: "分析执行失败的原因并尝试自动修复"
    enabled: true
    llm:                                         # Agent 专用 LLM 配置
      provider: "deepseek"
      base_url: "https://api.ppinfra.com/v3/openai"
      api_key: "${DEEPSEEK_API_KEY}"
      model: "deepseek/deepseek-v3-0324"
      temperature: 0.3
      max_tokens: 4096
      timeout: 60
    system_prompt: |
      你是一个专业的运维错误修复专家。当命令执行失败时，你需要：
      
      1. 分析失败原因（权限、依赖、配置、网络等）
      2. 制定修复策略
      3. 生成修复命令
      4. 评估修复风险
      
      修复原则：
      - 优先使用安全、可逆的修复方法
      - 避免破坏性操作
      - 详细记录修复过程
      - 如无法安全修复，及时上报
      
      请以JSON格式输出修复方案：
      {
        "error_analysis": "错误分析",
        "fix_strategy": "修复策略",
        "fix_commands": ["修复命令列表"],
        "risk_assessment": "风险评估",
        "can_auto_fix": true|false,
        "manual_steps": "需要手动处理的步骤（如有）"
      }

  # 报告生成Agent
  report_generator:
    name: "报告生成Agent"
    type: "agent"
    description: "基于执行历史生成运维分析报告"
    enabled: true
    llm:                                         # Agent 专用 LLM 配置
      provider: "deepseek"
      base_url: "https://api.ppinfra.com/v3/openai"
      api_key: "${DEEPSEEK_API_KEY}"
      model: "deepseek/deepseek-v3-0324"
      temperature: 0.3
      max_tokens: 4096
      timeout: 60
    system_prompt: |
      你是一个专业的运维报告分析师。基于整个执行过程，生成详细的分析报告。
      
      报告应包含：
      1. 执行概要（任务、时间、结果）
      2. 详细执行过程
      3. 发现的问题和解决方案
      4. 系统状态分析
      5. 改进建议
      6. 风险提示
      
      报告格式要求：
      - 结构清晰，层次分明
      - 数据准确，分析客观
      - 结论明确，建议可行
      - 支持技术和管理两个视角

# =================================================================
# 工作流配置
# =================================================================
workflow:
  name: "智能运维分析工作流"
  version: "1.0.0"
  description: "端到端的智能运维分析处理流程"
  
  # 工作流节点
  nodes:
    # 开始节点
    - name: "start"
      type: "start"
      description: "工作流开始节点"
      
    # 意图分析节点
    - name: "intent_analysis"
      type: "agent"
      description: "分析用户运维需求的意图"
      agent_ref: "intent_analyzer"
      inputs:
        - name: "user_input"
          type: "string"
          description: "用户输入的运维需求"
      outputs:
        - name: "intent_result"
          type: "json"
          description: "意图分析结果"
          
    # 条件判断节点
    - name: "check_remote_required"
      type: "condition"
      description: "判断是否需要远程分析"
      conditions:
        requires_remote: "intent_result.requires_remote == true"
        
    # 直接回答节点（不需要远程分析）
    - name: "direct_answer"
      type: "agent"
      description: "直接回答简单问题"
      agent_ref: "intent_analyzer"
      inputs:
        - name: "simple_query"
          type: "string"
          
    # 任务规划节点
    - name: "task_planning"
      type: "agent"
      description: "制定详细的执行计划"
      agent_ref: "task_planner"
      inputs:
        - name: "intent_result"
          type: "json"
        - name: "user_input"
          type: "string"
      outputs:
        - name: "execution_plan"
          type: "json"
          
    # 计划执行循环节点
    - name: "execute_plan"
      type: "loop"
      description: "循环执行计划中的各个步骤"
      loop_config:
        items: "execution_plan.steps"
        max_iterations: 20
        
    # 步骤执行节点
    - name: "execute_step"
      type: "agent"
      description: "执行单个计划步骤"
      agent_ref: "command_executor"
      inputs:
        - name: "step_info"
          type: "json"
      outputs:
        - name: "step_result"
          type: "json"
          
    # 执行结果检查节点
    - name: "check_step_result"
      type: "condition"
      description: "检查步骤执行结果"
      conditions:
        success: "step_result.status == 'success'"
        failed: "step_result.status == 'failed'"
        retry: "step_result.status == 'retry'"
        
    # 错误修复节点
    - name: "fix_error"
      type: "agent"
      description: "尝试修复执行错误"
      agent_ref: "error_fixer"
      inputs:
        - name: "step_result"
          type: "json"
        - name: "step_info"
          type: "json"
      outputs:
        - name: "fix_result"
          type: "json"
          
    # 修复执行节点
    - name: "execute_fix"
      type: "agent"
      description: "执行修复命令"
      agent_ref: "command_executor"
      inputs:
        - name: "fix_commands"
          type: "array"
          
    # 报告生成节点
    - name: "generate_report"
      type: "agent"
      description: "生成运维分析报告"
      agent_ref: "report_generator"
      inputs:
        - name: "execution_history"
          type: "array"
        - name: "user_input"
          type: "string"
        - name: "intent_result"
          type: "json"
      outputs:
        - name: "final_report"
          type: "string"
          
    # 结束节点
    - name: "end"
      type: "end"
      description: "工作流结束节点"
      
  # 工作流边（连接关系）
  edges:
    # 主流程
    - from: "start"
      to: "intent_analysis"
      description: "开始意图分析"
      
    - from: "intent_analysis"
      to: "check_remote_required"
      description: "检查是否需要远程分析"
      
    # 简单问题直接回答
    - from: "check_remote_required"
      to: "direct_answer"
      condition: "not requires_remote"
      description: "简单问题直接回答"
      
    - from: "direct_answer"
      to: "end"
      description: "直接回答完成"
      
    # 复杂任务规划执行
    - from: "check_remote_required"
      to: "task_planning"
      condition: "requires_remote"
      description: "需要远程分析，开始任务规划"
      
    - from: "task_planning"
      to: "execute_plan"
      description: "开始执行计划"
      
    - from: "execute_plan"
      to: "execute_step"
      description: "执行单个步骤"
      
    - from: "execute_step"
      to: "check_step_result"
      description: "检查执行结果"
      
    # 成功继续下一步
    - from: "check_step_result"
      to: "execute_plan"
      condition: "success"
      description: "执行成功，继续下一步"
      
    # 失败尝试修复
    - from: "check_step_result"
      to: "fix_error"
      condition: "failed"
      description: "执行失败，尝试修复"
      
    - from: "fix_error"
      to: "execute_fix"
      description: "执行修复操作"
      
    - from: "execute_fix"
      to: "execute_plan"
      description: "修复完成，继续执行"
      
    # 重试
    - from: "check_step_result"
      to: "execute_step"
      condition: "retry"
      description: "需要重试"
      
    # 所有步骤完成，生成报告
    - from: "execute_plan"
      to: "generate_report"
      condition: "loop_completed"
      description: "所有步骤完成，生成报告"
      
    - from: "generate_report"
      to: "end"
      description: "报告生成完成" 