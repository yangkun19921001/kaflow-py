# =================================================================
# KaFlow-Py 聊天机器人模版 (MCP 集成版本)
# 基于 KaFlow-Py 协议标准的智能聊天机器人模版，集成 MCP 外部工具服务
# =================================================================

# =================================================================
# 协议版本与元信息
# =================================================================
protocol:
  name: "KaFlow-Py Chat Agent with MCP Template"
  version: "1.0.0"
  schema_version: "2025.09.10"
  description: "基于 KaFlow-Py 协议标准的智能聊天机器人模版，集成 MCP 外部工具服务"
  author: "DevYK"
  license: "MIT"

# =================================================================
# 全局配置
# =================================================================
global_config:
  # 运行时配置
  runtime:
    timeout: 180
    max_retries: 3
    parallel_limit: 2
    debug_mode: false
    trace_enabled: true
    checkpoint_enabled: true

  # 日志配置
  logging:
    level: "INFO"
    format: "json"
    output: "stdout"
    file_path: "./logs/chat_agent_mcp.log"
    max_size: "50MB"
    max_files: 5

# =================================================================
# Agent 配置 (符合 agent_schema.base_structure)
# =================================================================
agents:
  chat_agent_with_mcp:
    name: "chat_agent_with_mcp"                  # Agent 名称
    type: "react_agent"                          # Agent 类型，使用 ReAct 支持工具
    description: "智能聊天机器人，集成 MCP 外部工具服务，支持远程命令执行等功能"
    enabled: true                                # 是否启用
    
    system_prompt: |                             # 系统提示词
      你是一个强大的AI助手，具备通过 MCP (Model Context Protocol) 调用外部工具的能力。你的任务是：
      
      1. 理解用户的问题和需求
      2. 合理使用可用的 MCP 工具来帮助用户解决问题
      3. 提供准确、有用的回答和操作结果
      4. 保持对话的连贯性和上下文理解
      5. 用温和、专业的语气与用户交流
      
      可用的 MCP 工具功能：
      - remote_exec: 远程命令执行，可以在指定机器上执行命令
      - 其他通过 MCP 服务器提供的工具
      
      使用 MCP 工具时请：
      - 根据用户需求选择合适的工具
      - 清楚解释你要执行的操作
      - 总结工具执行的结果
      - 如果操作失败，提供替代方案或错误说明
      - 注意安全性，避免执行危险命令
      
      请始终记住之前的对话内容，并根据上下文提供相关回答。
    
    llm:                                         # Agent 专用 LLM 配置
      provider: "deepseek"
      base_url: "https://api.ppinfra.com/v3/openai"
      api_key: "${DEEPSEEK_API_KEY}"
      model: "deepseek/deepseek-v3-0324"
      temperature: 0.3
      max_tokens: 4096
      timeout: 60
      
    tools: []                                    # 内置工具列表 (空表示只使用 MCP 工具)
    
    mcp_servers:                                 # MCP 服务器配置
      - name: "remote_execution_server"
        description: "远程命令执行 MCP 服务器"
        transport: "sse"
        url: "http://10.1.16.4:8000/mcp/sse"
        timeout_seconds: 30
        enabled: true
        retry_attempts: 3
        
        # 预期的工具列表 (用于验证)
        expected_tools:
          - name: "remote_exec"
            description: "在远程机器上执行命令"
            parameters:
              type: "object"
              properties:
                machineId:
                  type: "string"
                  description: "目标机器ID"
                script:
                  type: "string"
                  description: "要执行的命令或脚本"
              required: ["machineId", "script"]

# =================================================================
# 工作流配置 (符合 workflow_schema.base_config)
# =================================================================
workflow:
  name: "智能 MCP 聊天机器人工作流"
  version: "1.0.0"
  description: "集成 MCP 外部工具服务的聊天机器人，支持远程命令执行等功能"
  author: "DevYK"
  schema_version: "2025.09.10"
  
  settings:
    timeout: 180
    max_retries: 3
    debug_mode: false

  # =================================================================
  # 节点定义 (符合 node_schema.base_structure)
  # =================================================================
  nodes:
    - name: "start_node"
      type: "start"
      description: "工作流开始节点"
      position:
        x: 100
        y: 100
      outputs:
        - name: "user_input"
          type: "string"
          description: "用户输入内容"

    - name: "chat_agent_with_mcp"
      type: "agent"
      description: "智能聊天机器人 Agent (集成 MCP)"
      agent_ref: "chat_agent_with_mcp"  # 引用 agents 配置段中的 chat_agent_with_mcp
      position:
        x: 300
        y: 100
      
      inputs:
        - name: "user_message"
          type: "string"
          required: true
          source: "start_node.user_input"
          description: "用户输入的消息"
        - name: "thread_id"
          type: "string"
          required: false
          description: "对话线程ID，用于记忆管理"
      
      outputs:
        - name: "response"
          type: "string"
          description: "AI助手的回复"
        - name: "mcp_results"
          type: "array"
          description: "MCP 工具执行结果列表"
        - name: "confidence"
          type: "number"
          description: "回答的置信度"

    - name: "end_node"
      type: "end"
      description: "工作流结束节点"
      position:
        x: 500
        y: 100
      inputs:
        - name: "final_response"
          type: "string"
          required: true
          source: "chat_agent_with_mcp.response"
          description: "最终回复内容"
        - name: "mcp_results"
          type: "array"
          required: false
          source: "chat_agent_with_mcp.mcp_results"
          description: "MCP 工具执行结果"

  # =================================================================
  # 边定义 (符合 edge_schema.base_structure)
  # =================================================================
  edges:
    - from: "start_node"
      to: "chat_agent_with_mcp"
      description: "传递用户输入到智能聊天Agent"
      
    - from: "chat_agent_with_mcp"
      to: "end_node"
      description: "输出最终回复和 MCP 执行结果"

# =================================================================
# 使用说明
# =================================================================
usage_notes: |
  智能 MCP 聊天机器人模版使用说明：
  
  1. 功能特点：
     - 完全符合 KaFlow-Py 协议标准
     - 集成 MCP (Model Context Protocol) 外部工具服务
     - 支持远程命令执行和其他 MCP 工具
     - 支持连续对话和上下文理解
     - 自动记忆管理（基于全局memory配置）
     - ReAct Agent 架构，支持推理-行动-观察循环
     - 智能工具选择和结果解释
  
  2. MCP 集成特性：
     - 🌐 remote_exec: 远程命令执行工具
     - 🔧 自动工具发现和加载
     - 🔄 工具调用重试机制
     - ⚡ SSE (Server-Sent Events) 传输协议
     - 🛡️ 安全的工具调用验证
  
  3. 使用示例：
     - "在机器 420c126d598a97ee31fb70127b6b9a46 上执行 ls -la 命令"
     - "查看远程服务器的磁盘使用情况"
     - "获取远程机器的系统信息"
     - "执行远程脚本或命令"
  
  4. 环境变量：
     - DEEPSEEK_API_KEY: DeepSeek API密钥
     - 或者 OPENAI_API_KEY: OpenAI API密钥
  
  5. MCP 服务器要求：
     - 服务器地址: http://10.1.16.4:8000/mcp/sse
     - 传输协议: SSE (Server-Sent Events)
     - 必须实现 MCP 协议规范
     - 提供 remote_exec 工具
  
  6. 启动方式：
     python main.py --config config/chat_agent_mcp.yaml
  
  7. 自定义配置：
     - 修改 system_prompt 定制AI助手的行为和 MCP 工具使用策略
     - 调整 temperature 控制回答的创造性（MCP版建议较低值）
     - 修改 max_tokens 控制回答长度
     - 配置 mcp_servers 添加更多外部工具服务
     - 设置工具调用的超时和重试参数
  
  8. 安全注意事项：
     - MCP 工具具有强大的远程执行能力，请谨慎使用
     - 建议在受控环境中测试
     - 避免执行可能造成损害的命令
     - 定期检查和审计工具调用日志 